/*
Copyright © 2020 Dmytro Korniienko (kDn)
JeeUI2 lib used under MIT License Copyright (c) 2019 Marsel Akhkamov

    This file is part of FireLamp_JeeUI.

    FireLamp_JeeUI is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    FireLamp_JeeUI is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FireLamp_JeeUI.  If not, see <https://www.gnu.org/licenses/>.

(Цей файл є частиною FireLamp_JeeUI.

   FireLamp_JeeUI - вільна програма: ви можете перепоширювати її та/або
   змінювати її на умовах Стандартної громадської ліцензії GNU у тому вигляді,
   у якому вона була опублікована Фондом вільного програмного забезпечення;
   або версії 3 ліцензії, або (на ваш вибір) будь-якої пізнішої
   версії.

   FireLamp_JeeUI поширюється в надії, що вона буде корисною,
   але БЕЗ ВСЯКИХ ГАРАНТІЙ; навіть без неявної гарантії ТОВАРНОГО ВИГЛЯДУ
   або ПРИДАТНОСТІ ДЛЯ ВИЗНАЧЕНИХ ЦІЛЕЙ. Докладніше див. у Стандартній
   громадська ліцензія GNU.

   Ви повинні були отримати копію Стандартної громадської ліцензії GNU
   разом із цією програмою. Якщо це не так, див.
   <https://www.gnu.org/licenses/>.)
*/

#ifndef __USER_CONFIG_H
#define __USER_CONFIG_H

// Всі налаштування користувача тут.
// Насамперед будуть використовуватися налаштування з цього файлу
// у разі відсутності будь-якого системного налаштування в цьому файлі, буде застосовано значення за замовчуванням із системного файлу config.h

// Для того щоб зміни в цьому файлі набрали чинності, його необхідно
// СКОПІЮВАТИ під ім'ям user_config.h, в подальшому, при оновленні репозиторію (git pull, git reset, і т.п.)
// цей файл з налаштуваннями користувача, user_config.h, оновлюватися не буде.

// Якщо щось закоментовано, будуть використовуватися налаштування за замовчуванням із системного файлу config.h
// Це корисно для випадків, коли ви не знаєте, що за параметр і хочете залишити як є, не змінюючи його.


//------------------------------ Основные Настройки
#define LANG_FILE                   "text_res-EN.h"         // для інших мов, до компіляції, змінити постфікс файлу "text_res-***.h". 
															    // наявність можливих мов дивіться в теці include в основній теці проекту. 
//#define LAMP_DEBUG                                          // режим відлагодження, також можна ввімкнути в platformio.ini

#define RESTORE_STATE 1                                     // відновити стан вкл\викл, після перезагрузки
//#define DELAYED_EFFECTS         (1U)                        // відкладена загрузка єффектів (не трогати без потреби)
//#define CASHED_EFFECTS_NAMES    (1U)                        // кешувати імена ефектів, УВАГА! жере пам'ять, використовувати на свій страх та ризик
#define SHOWSYSCONFIG                                       // Показати інженерн налаштування 
//#define MOOT                                                // Розкоментувати, якщо не потрібен пункт налаштувань "Конфіги",
                                                               // а також зміна стану довільних пінів і завантаження конфігів в "Події"
#define DISABLE_LED_BUILTIN                                 // Відключити вбудований в плату світлодіод, якщо потрібно, щоб світив - закоментувати рядок

//#define USE_STREAMING                                       // Якщо розкоментовано, з'являється додатковий пункт у меню "Трансляція",
                                                               // дозволяє транслювати на лампу ефекти зі спеціалізованих програм, типу Jinx!, SoulMate
//#define EXT_STREAM_BUFFER                                   // додатковий буфер для трансляції, якщо закоментований, буде використовуватися буфер малювання
                                                               // на ESP8266 з великими матрицями включати небажано (не вистачить пам'яті контролера)

//#define OPTIONS_PASSWORD F("password")			                // якщо встановлено, то налаштування лампи будуть закриті вказаним паролем


//------------------------------ Подключаемое дополнительное оборудование
#define ESP_USE_BUTTON                                      // якщо рядок не закоментований, має бути підключена кнопка (інакше ESP може реєструвати "фантомні" натискання та некоректно встановлювати яскравість)
#define MIC_EFFECTS                                         // Увімкнути використання мікрофона для ефектів
#define MP3PLAYER                                           // Включити використання MP3 плеєра (DF Player)
//#define TM1637_CLOCK                                        // Використовувати 7-ми сегментний LED-індикатор TM1637
//#define DS18B20                                             // Використовувати датчик температури DS18b20 
//#define ENCODER                                             // Для керування використовувати енкодер (не сумісно з кнопкою)
//#define RTC                                                 // Увімкнути використання зовнішнього модуля RTC

//------------------------------ 


//------------------------------ Опис Устаткування (піни підключення, параметри тощо)
// Налаштування енкодера та поведінки, якщо задіяно
#ifdef ENCODER
  #undef ESP_USE_BUTTON
  #define SW                    (D5)                        // Пін кнопки стандартного енкодера
  #define DT                    (D1)                        // Пін DT енкодера
  #define CLK                   (D2)                        // Пін CLK енкодера
  #define EXIT_TIMEOUT          (3U)                        // Таймаут виходу з налаштувань ефекту. Приблизно рівно (EXIT_TIMEOUT * 10 секунд)

// ----------------- Опціональні налаштування (за замовчуванням, без потреби краще не коментувати та не міняти)
//#define EB_FAST                 (30)                        // таймують швидкого повороту, мс
//#define EB_DEB                  (80)                        // дебаунс кнопки, мс
//#define EB_HOLD                 (1000)                      // таймаут утримання кнопки, мс
//#define EB_CLICK                (400)                       // таймаут наклікувания, мс

/* ----------------- Тут можна налаштувати поведінку по клікам кнопки енкодера.
  ВАЖЛИВО! Один клік зарезервований за функцією вкл\викл лампу. Ви можете встановити будь-які значення в межах 2-8,
  але слідкуйте за тим, щоб номери кліків не повторювалися. Ви також можете допускати пропуски між номерами, такі кліки просто
  будуть проігноровані, не станеться нічого. Так само, потрібно мати на увазі, що якщо ви, наприклад, встановили ENC_AUX_CLICK (7U), але
  AUX_PIN закоментований, ця опція так само не має дії. Це справедливо і для ENC_MIC_CLICK (потрібно конфігурувати мікрофон).
*/
#define ENC_DEMO_CLICK          (2U)                        // Номер кліка, на якому перемикати режим ДЕМО (вкл\викл)
#define ENC_GBRI_CLICK          (3U)                        // Номер кліка, на якому перемикати Глобальна Яскравість\Яскравість
//#define ENC_MIC_CLICK           (4U)                        // Номер кліка, на якому перемикати мікрофон ON\OFF глобально
//#define ENC_IP_CLICK            (5U)                        // Номер кліка, на якому відбувається виведення IP лампи
//#define ENC_TIME_CLICK          (6U)                        // Номер кліка, на якому відбувається виведення поточного часу
//#define ENC_AUX_CLICK           (7U)                        // Номер кліка, на якому перемикати стан AUX-реле

#endif

// налаштування кнопки, якщо дозволена
#ifdef ESP_USE_BUTTON
#define BTN_PIN                 (4)                         // пін кнопки (D1), УВАГА! Не використовуйте для кнопки піни D0 та D4. На них кнопка не працює!
#define PULL_MODE               (LOW_PULL)                   // підтяжка кнопки до нуля (для сенсорних кнопок на TP223) - LOW_PULL, підтяжка кнопки до живлення (для механічних кнопок NO, на масу) - HIGH_PULL
// #define BUTTON_STEP_TIMEOUT   (75U)                         // кожні BUTTON_STEP_TIMEOUT мс буде генеруватися подія утримання кнопки (для регулювання яскравості)
// #define BUTTON_CLICK_TIMEOUT  (500U)                        // максимальний час між натисканнями кнопки в мс, до досягнення якого вважається серія послідовних натискань
// #define BUTTON_TIMEOUT        (500U)                        // з якого моменту починає вважатися, що кнопка утримується в мс
#endif

#define MIC_PIN               (36)                           // пін для мікрофона, ESP8266 Analog Pin ADC0 = A0
#ifdef MIC_EFFECTS
#define MIC_POLLRATE          (100U)                         // як часто опитувати мікрофон, мс
#define FAST_ADC_READ                                        // мікрофон, використовувати повний діапазон звукових частот, якщо закоментовано, то буде до 5кГц, але заощадить пам'ять і простіше обрахувати.
#define SAMPLING_FREQ         (18000U*2U)
#endif

#ifdef TM1637_CLOCK
  #define TM_CLK_PIN          (D4)                          // Працює не на всіх пінах. Краще використовувати рекомендований
  #define TM_DIO_PIN          (D7)                          // Працює не на всіх пінах. Краще використовувати рекомендований
 #define TM_SHOW_BANNER 0                                   // 1 - показувати IP при загрузці, 0 - ні 
#endif

#ifdef RTC
  #define RTC_MODULE          (2U)                          // Підтримуються модулі DS1302 = (1U),  DS1307 = (2U), DS3231 = (3U)
  #define RTC_SYNC_PERIOD     (24U)                         // Період синхронізації RTC c ntp (часы)
  #if RTC_MODULE > (1U)                                     // Якщо обрано модуль с I2C (DS1307 или DS3231)
    #ifdef TM1637_CLOCK                                     // Якщо є дисплей TM1637, то можемо використовувати його піни для RTC (але модуль RTC працює не на всіх пінах)
      #define pin_SW_SDA        (TM_CLK_PIN)                // Пін SDA RTC модуля підключаємо до CLK піну дисплея
      #define pin_SW_SCL        (TM_DIO_PIN)                // Пін SCL RTC модуля підключаємо до DIO піну дисплея
    #else                                                   // Піни підбирати експериментальним шляхом, точно працює на D2 та D4
      #define pin_SW_SDA        (D2)                        // Призначаємо висновок для роботи як лінію SDA програмної шини I2C.
      #define pin_SW_SCL        (D4)                        // Призначаємо висновок для роботи як лінію SCL програмної шини I2C.
    #endif
  #endif
  #if RTC_MODULE == (1U)                                    // Якщо обрано модуль DS1302.
    #define pin_RST             (D8)                        // Призначаємо вихід RST.
    #define pin_DAT             (D3)                        // Призначаємо вихід DAT.
    #define pin_CLK             (D4)                        // Призначаємо вихід CLK.
  #endif
#endif

#ifdef MP3PLAYER
  #define MP3_TX_PIN            (17)                        // TX mp3 player RX (D5)
  #define MP3_RX_PIN            (16)                        // RX mp3 player TX (D6)
  #define MP3_SERIAL_TIMEOUT    (300U)                      // 300мс за замовчуванням, діапазон 200...1000, підбирається експериментально, не бажано сильно підвищувати
  #define DFPALYER_START_DELAY  (500U)                      // 500мс за замовчуванням, діапазон 10...1000, підбирається експериментально, не бажано сильно підвищувати, безумовна затримка до ініціалізації
#endif

#ifdef DS18B20                                              // Використовується для охолодження матриці, але може використовуватись і для зовнішніх пристроїв
  #define DS18B20_PIN           (D5)                        // Пін підключення датчика DS18b20. При використанні енкодара датчик можна призначити на пін кнопки (SW) енкодера. І поставити резистор підтяжки до +3.3в 4.7кОм.
  #define DS18B_READ_DELAY      (10U)                       // Секунд – періодичність опитування датчика. Частіше не треба, можливо, краще рідше. З урахуванням теплоємності датчика, повітря та підкладки матриці - сенсу немає
  #define COOLER_PIN            (-1)                        // Пін для керування вентилятором охолодження лампи. (-1) якщо керування вентилятором не потрібне. 
  #define COOLER_PIN_TYPE       (0U)                        // 0-дискретний вкл\викл, 1 - ШІМ (для 4-х пінових вентиляторів). Переконайтеся, що COOLER_PIN підтримує PWM.
  #define COOLING_FAIL          (6U)                        // Кількість циклів DS18B_READ_DELAY Якщо за цей час зменшити температуру до TEMP_DEST (Дискретний режим виходу вентилятора), або TEMP_MAX (ШИМ),
                                                            // якщо не вдалося, то поступово зменшуватимемо ліміт струму матриці. Після досягнення TEMP_DES/TEMP_MAXT рівень обмеження
                                                            // струму буде утримуватися на цьому рівні, доки не буде перечитаний основний конфіг лампи.
#define CURRENT_LIMIT_STEP    (10U)                         // 0 - якщо тротлінг не потрібний. Крок зменшення ліміту струму матриці у відсотках, тобто Новий_Ліміт -= Ліміт/100 * CURRENT_LIMIT_STEP
  #if COOLER_PIN_TYPE
    #define MIN_SPEED         (100U)                        // 0-1023. Мінімальне заповнення ШІМ, за якого вентилятор вже починає впевнено стартувати
    #define MAX_SPEED         (1023U)                       // 0-1023. максимальне заповнення ШІМ, у якому шум вентилятора ще комфортний. Якщо завдання зберегти матрицю, краще залишити як є.
    #define TEMP_MAX          (70U)                         // Температура максимальної потужності вентилятора. При 70С діоди починають втрачати яскравість, а за 80+ - деградувати. Краще не міняти у більшу сторону
    #define TEMP_MIN          (50U)                         // Температура, при якій вентилятор відключається (або обертається на мінімум обертів, залежить від моделі)
  #else
    #define TEMP_DEST         (50U)                         // Температура вимкнення вентилятора. Є якийсь гістерезис +-10%, щоб вентилятор не смикався у Дискретному режимі.
    #define COOLER_PIN_LEVEL  (HIGH)                        // Якщо використовується некерований вентилятор, (режим Дискретний вихід). Якщо LOW – активний підтягнутий до GND, HIGH – активний підтягнутий до 3.3 вольт.
  #endif
#endif
//------------------------------ 


//------------------------------ Додаткові можливості (піни керування)

//#define MOSFET_PIN            (D2)                          // пін MOSFET транзистора (D2) - може бути використаний для керування живленням матриці/стрічки
#define MOSFET_LEVEL          (HIGH)                        // логічний рівень, в який буде встановлено пін MOSFET_PIN, коли матрицю включено - HIGH або LOW
//#define ALARM_PIN             (D8)                          // пін стану будильника (D8) - може бути використаний для керування будь-яким зовнішнім пристроєм на час роботи будильника
#define ALARM_LEVEL           (HIGH)                        // логічний рівень, в який буде встановлено пін ALARM_PIN, коли "світанок"/будильник увімкнено

//----------- У разі використання додаткового AUX-реле для прямого або програмованого керування зовнішніми приладами. -----------
// Для можливості використовувати додаткове AUX-реле, рядки нижче мають бути розкоментовані
//#define AUX_PIN (D2)                                        // пін додаткового реле загального призначення AUX. Може бути встановлений будь-який із "безпечних"
                                                              // пін вибирати УВАЖНО, щоб він не конфліктував з пінами вище
//#define AUX_LEVEL (HIGH)                                    // логічний рівень AUX_PIN для активації реле - HIGH або LOW (залежить від типу використовуваного реле)

//------------------------------


//------------------------------ Налаштування LED Матриці або Стрічки

#define LAMP_PIN              (2)                          // пін матриці (D3)

#define WIDTH                 (32U)                         // ширина матриці
#define HEIGHT                (32U)                         // висота матриці

#define COLOR_ORDER           (GRB)                         // порядок кольорів на стрічці. Якщо колір відображається некоректно, змінюйте. Почати можна з RGB

#define MATRIX_TYPE           (0U)                          // тип матриці: 0 - зигзаг, 1 - параллельна
#define CONNECTION_ANGLE      (1U)                          // кут підключення: 0 - лівий нижній, 1 - лівий верхній, 2 - правий верхній, 3 - правий нижній
#define STRIP_DIRECTION       (3U)                          // напрямок стрічки з кута: 0 - вправо, 1 - вгору, 2 - вліво, 3 - вниз
                                                            // при неправильному налаштуванні матриці ви отримаєте попередження "Wrong matrix parameters! Set to default"
                                                            // шпаргалка з налаштування матриці тут! https://alexgyver.ru/matrix_guide/

#define BRIGHTNESS            (255U)                        // стандартна максимальна яскравість (0-255), чим менше значення, тим менша максимально можлива яскравість
#define OFF_BRIGHTNESS          (2U)                        // яскравість виведення тексту у разі вимкненої лампи
#define CURRENT_LIMIT         (30000U)                       // ліміт по струму в міліамперах, автоматично керує яскравістю (пошкодуй свій блок живлення!) 0 - вимкнути ліміт

//#define XY_EXTERN                                           // Користувальницький мапінг нестандартних матриць, читати у файлі ../include/XY.h

#define MATRIXx4                                            // Активувати, якщо ваша матриця складається з 4-х однакових квадратних матриць розміром 16х16 або 8х8 пікселів.
                                                             // При цьому WIDTH і HEIGHT повинні відповідати дворазовому розміру матриць, що використовуються в панно.
                                                             // Приклад: використовуються чотири матриці розміром 16х16, - WIDTH і HEIGHT повинні бути встановлені в (32U)
//------------------------------ 

//------------------------------ Всякое разное
// #define NUMHOLD_TIME          (3000U)                       // час запам'ятовування останньої комбінації яскравості/швидкості/масштабу в мс

// #define FADE_TIME             (1000U)                       // тривалість всього фейдера в мс (плавне згасання ефекту при зміні DEMO)
// #define FADE_STEPTIME         (20U)                         // тривалість кроку фейдера, мс

// #define MAX_FPS               (60U)                         // Максимальна кількість кадрів, що обчислюються і виводяться в секунду
                                                                // реальне число FPS залежить від складності ефекту, розміру матриці та продуктивності контролера
                                                                // esp8266 на 80MHz може обрахувати одну матрицю 16x16 зі швидкістю близько 50 кадрів за секунду залежно від ефекту
                                                                // і з урахуванням інших супутніх завдань
//#define SPEED_ADJ (float)NUM_LEDS/256                         // Без потреби не чіпати! Виправлення швидкості ріал-тайм ефектів щодо розмірів метриці.

//------------------------------ 

#endif
