/*
Copyright © 2020 Dmytro Korniienko (kDn)
JeeUI2 lib used under MIT License Copyright (c) 2019 Marsel Akhkamov

    This file is part of FireLamp_JeeUI.

    FireLamp_JeeUI is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    FireLamp_JeeUI is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FireLamp_JeeUI.  If not, see <https://www.gnu.org/licenses/>.

  (Этот файл — часть FireLamp_JeeUI.

   FireLamp_JeeUI - свободная программа: вы можете перераспространять ее и/или
   изменять ее на условиях Стандартной общественной лицензии GNU в том виде,
   в каком она была опубликована Фондом свободного программного обеспечения;
   либо версии 3 лицензии, либо (по вашему выбору) любой более поздней
   версии.

   FireLamp_JeeUI распространяется в надежде, что она будет полезной,
   но БЕЗО ВСЯКИХ ГАРАНТИЙ; даже без неявной гарантии ТОВАРНОГО ВИДА
   или ПРИГОДНОСТИ ДЛЯ ОПРЕДЕЛЕННЫХ ЦЕЛЕЙ. Подробнее см. в Стандартной
   общественной лицензии GNU.

   Вы должны были получить копию Стандартной общественной лицензии GNU
   вместе с этой программой. Если это не так, см.
   <https://www.gnu.org/licenses/>.)
*/

#ifndef __USER_CONFIG_H
#define __USER_CONFIG_H

// Все пользовательские настройки находятся здесь.
// В первую очередь будут использоваться настройки из этого файла
// В случае отсутствия какой-либо системной настройки в этом файле будет применено значение по-умолчанию из системного файла config.h

// Для того чтобы изменения в этом файле вступили в силу его необходимо
// СКОПИРОВАТЬ под именем user_config.h, в дальнейшем при обновлении репозитория (git pull, git reset, и т.п.)
// пользовательский файл с настройками user_config.h обновляться не будет

// Если что-то закомментировано, то будут использоваться настройки по-умолчанию из системного файла config.h
// Полезно для случаев, когда вы не знаете что за параметр и хотите оставить как есть, не меняя


//------------------------------ Основные Настройки
#define LANG_FILE                   "text_res-RUS.h"         // для других языков при компиляции менять постфикс файла "text_res-***.h". 
															// Наличие нужного файла перевода смотреть в папке include в основной папке проекта 
//#define LAMP_DEBUG                                          // режим отладки, можно также включать в platformio.ini

#define RESTORE_STATE 1                                     // востанавливать состояние вкл/выкл, демо, после перезагрузки.
//#define DELAYED_EFFECTS         (1U)                        // отложенная загрузка эффектов
//#define CASHED_EFFECTS_NAMES    (1U)                        // кешировать имена эффектов, ВНИМАНИЕ!!! жрет память, использовать на свой страх и риск
#define SHOWSYSCONFIG                                       // Показывать системное меню
//#define MOOT                                                // Раскомментировать, если не нужен пункт настроек "Конфиги", 
                                                              // а так же изменение состояния произвольных пинов и загрузка конфигов в "События"
#define DISABLE_LED_BUILTIN                                 // Отключить встроенный в плату светодиод, если нужно чтобы светил - закомментировать строку
//#define USE_FTP                                             // доступ к LittleFS по FTP, логин/пароль: esp8266
#define OTA                                                 // Обновление по ОТА


//------------------------------ Подключаемое дополнительное оборудование
#define ESP_USE_BUTTON                                      // если строка не закомментирована, должна быть подключена кнопка (иначе ESP может регистрировать "фантомные" нажатия и некорректно устанавливать яркость)
//#define MIC_EFFECTS                                         // Включить использование микрофона для эффектов
//#define MP3PLAYER                                           // Включить использование MP3 плеера (DF Player)
//#define TM1637_CLOCK                                        // Использовать 7-ми сегментный LED-индикатор TM1637
//#define DS18B20                                             // Использовать датчик температуры DS18b20 для управления вентилятором охлаждения матрицы
//#define ENCODER                                             // Использовать Энкодер
//------------------------------ 


//------------------------------ Описание Оборудования (пины подключения, параметры и т.)
// настройки энкодера и поведения, если разрешен
#ifdef ENCODER
  #undef ESP_USE_BUTTON
  #define SW                    (D5)                        // Пин кнопки стандартного энкодера
  #define DT                    (D1)                        // Пин DT энкодера
  #define CLK                   (D2)                        // Пин CLK энкодера
  #define EXIT_TIMEOUT          (3U)                        // Таймаут выхода из настроек эффекта. Приблизительно равно (EXIT_TIMEOUT * 10 секунд)
  #define VERTGAUGE             (1U)                        // Вывод значений вертикальными "линейками" на матрице
  #define VERTGAUGE_COLOR       (10)                        // Цвет вывода ветикальных линеек для энкодера (соответствует цвету в эффекте "Блики на воде, цвета")
  #define ENC_STRING_DELAY      (40)                        // Скорость вывода "Бегущей строкой", меньше == быстрее, ниже 30 ставить не стоит
  #define EXIT_TIMEOUT          (3U)                        // Таймаут выхода из режима "Настройки эффекта" приблизительно равно EXIT_TIMEOUT*10 секунд.

// ----------------- Опциональные настройки (показаны по умолчанию, без надобности лучше не раскомментировать и не менять)
//#define EB_FAST                 (30)                        // таймаут быстрого поворота, мс
//#define EB_DEB                  (80)                        // дебаунс кнопки, мс
//#define EB_HOLD                 (1000)                      // таймаут удержания кнопки, мс
//#define EB_CLICK                (400)                       // таймаут накликивания, мс

/* ----------------- Тут можно настроить поведение по накликиванию кнопки энкодера.
  ВАЖНО! Один клик зарезервирован за функцией вкл\выкл лампу. Вы вольны установить любые значения в пределах 2-8, 
  но следите за тем, чтобы номера кликов не повторялись. Вы так же можете допускать пропуски между номерами, такие клики просто
  будут проигнорированы, не произойдет ничего. Так же, нужно иметь в виду, что если вы, к примеру, задали ENC_AUX_CLICK (7U), но
  AUX_PIN закомментирован, эта опция так же не возимеет действия. Это справедливо и для ENC_MIC_CLICK (нужно сконфигурировать микрофон), 
  или ENC_OTA_CLICK (нужно раскомментировать #define OTA).
*/ 
#define ENC_DEMO_CLICK          (2U)                        // Номер клика, на котором переключать режим ДЕМО
#define ENC_GBRI_CLICK          (3U)                        // Номер клика, на котором переключать Глобальная Яркость\Яркость
//#define ENC_MIC_CLICK           (4U)                        // Номер клика, на котором переключать Микрофон ON\OFF глобально
//#define ENC_IP_CLICK            (5U)                        // Номер клика, на котором происходит вывод IP лампы
//#define ENC_TIME_CLICK          (6U)                        // Номер клика, на котором происходит вывод текущего времени
//#define ENC_AUX_CLICK           (7U)                        // Номер клика, на котором переключать состояние AUX-реле
//#define ENC_OTA_CLICK           (8U)                        // Номер клика, на котором входим в режим обновления по воздуху, по протоколу ESPOTA

//#define ENC_STRING_DELAY        (30U)                       // Скорость вывода информации с энкодера на матрицу, меньше = быстрее.
//#define ENC_STRING_EFFNUM_DELAY (17U)                       // Скорость вывода номера эффекта при вращении энкодера, меньше = быстрее
//#define ENC_STRING_COLOR        0xfcba03                    // Цвет вывода на матрицу, при использовании энкодера. Задавать в HEX формате, #fcba03 нужно записать как 0xfcba03 (найти можно так https://www.google.com/search?client=firefox-b-d&q=color+HEX)
#endif

// настройка кнопки, если разрешена
#ifdef ESP_USE_BUTTON
#define BTN_PIN                 (D1)                         // пин кнопки (D1), ВНИМАНИЕ! Не используйте для кнопки пины D0 и D4. На них кнопка не работает!
#define PULL_MODE               (LOW_PULL)                   // подтяжка кнопки к нулю (для сенсорных кнопок на TP223) - LOW_PULL, подтяжка кнопки к питанию (для механических кнопок НО, на массу) - HIGH_PULL
// #define BUTTON_STEP_TIMEOUT   (75U)                         // каждые BUTTON_STEP_TIMEOUT мс будет генерироваться событие удержания кнопки (для регулировки яркости)
// #define BUTTON_CLICK_TIMEOUT  (500U)                        // максимальное время между нажатиями кнопки в мс, до достижения которого считается серия последовательных нажатий
// #define BUTTON_TIMEOUT        (500U)                        // с какого момента начинает считаться, что кнопка удерживается в мс
#endif

#define MIC_PIN               (A0)                           // пин для микрофона, ESP8266 Analog Pin ADC0 = A0
#ifdef MIC_EFFECTS
#define MIC_POLLRATE          (100U)                         // как часто опрашиваем микрофон, мс
#define FAST_ADC_READ                                        // микрофон, использовать полный диапазон звуковых частот, если закомментировано, то будет до 5кГц, но сэкономит память и проще обсчитать...
#define SAMPLING_FREQ         (18000U*2U)
#endif


#ifdef TM1637_CLOCK
  #define TM_CLK_PIN D4                                     // Работает не на всех пинах. Лучше использовать рекомендованый
  #define TM_DIO_PIN D7                                     // Работает не на всех пинах. Лучше использовать рекомендованый
//  #define TM_SHOW_BANNER 1                                  // 1 - показывать IP при загрузке, 0 - нет 
#endif

#ifdef MP3PLAYER
  #define MP3_TX_PIN            (D5)                        // TX mp3 player RX (D5)
  #define MP3_RX_PIN            (D6)                        // RX mp3 player TX (D6)
  #define MP3_SERIAL_TIMEOUT    (300U)                      // 300мс по умолчанию, диапазон 200...1000, подбирается экспериментально, не желательно сильно повышать
  #define DFPALYER_START_DELAY  (500U)                      // 500мс по умолчанию, диапазон 10...1000, подбирается экспериментально, не желательно сильно повышать, безусловная задержка до инициализации
#endif

#ifdef DS18B20                                              // Используется для охлаждения матрицы, но может использоваться и для внешних устройств
  #define DS18B20_PIN           (D5)                        // Пин подключения датчика DS18b20. При использовании энкодара, датчик можно назначить на пин кнопки (SW) энкодера. И поставить резистор подтяжки к +3.3в.
  #define DS18B_READ_DELAY      (10U)                       // Секунд - периодичность опроса датчика. Чаще не надо, возможно лучше реже. С учетом теплоемкости датчика, воздуха и подложки матрицы - смысла нет
  #define COOLER_PIN            (-1)                        // Пин для управления вентилятором охлаждения лампы. (-1) если управление вентилятором не нужно. 
  #define COOLER_PIN_TYPE       (0U)                        // 0-дискретный вкл\выкл, 1 - ШИМ (для 4-х пиновых вентиляторов). Убедитесь, что вывод COOLER_PIN поддерживает PWM.
  #define COOLING_FAIL          (6U)                        // Количество циклов DS18B_READ_DELAY. Если за это время снизить температуру до TEMP_DEST (Дискретный режим выхода вентилятора), или TEMP_MAX (ШИМ),  
                                                            // не удалось, то будем постепенно уменьшать лимит тока матрицы. После достижения TEMP_DES/TEMP_MAXT уровень ограничения
                                                            // тока будет удерживаться на этом уровне, пока не будет перечитан основной конфиг лампы.
#define CURRENT_LIMIT_STEP    (10U)                         // 0 - если троттлинг не нужен. Шаг уменьшения лимита тока матрицы, в процентах, то есть Новый_Лимит -= Лимит/100 * CURRENT_LIMIT_STEP
  #if COOLER_PIN_TYPE
    #define MIN_SPEED         (100U)                        // 0-1023. Минимальное заполнение ШИМ, при котором вентилятор уже начинает уверенно стартовать
    #define MAX_SPEED         (1023U)                       // 0-1023. максимальное заполнение ШИМ, при котором шум вентилятора еще комфортен. Если задача уберечь матрицу, лучше оставить как есть.
    #define TEMP_MAX          (70U)                         // Температура максимальной мощности вентилятора. При 70С диоды начинают терять яркость, а при 80+ - деградировать. Лучше не менять в большую сторону
    #define TEMP_MIN          (50U)                         // Температура при которой вентилятор отключается (или вращается на минимум оборотов, зависит от модели)
  #else
    #define TEMP_DEST         (50U)                         // Температура отключения вентилятора. Есть некий гистерезис +-10%, чтобы вентилятор не дергался в Дискретном режиме.
    #define COOLER_PIN_LEVEL  (HIGH)                        // Если используется неуправлямый винтелятор, (режим Дискретный выход). Если LOW - активный подтянут к GND, HIGH - активный подтянут к 3.3 вольт.
  #endif
#endif
//------------------------------ 


//------------------------------ Дополнительные возможности (пины управления)

//#define MOSFET_PIN            (D2)                          // пин MOSFET транзистора   (D2) - может быть использован для управления питанием матрицы/ленты
#define MOSFET_LEVEL          (HIGH)                        // логический уровень, в который будет установлен пин MOSFET_PIN, когда матрица включена - HIGH или LOW
//#define ALARM_PIN             (D8)                          // пин состояния будильника (D8) - может быть использован для управления каким-либо внешним устройством на время работы будильника
#define ALARM_LEVEL           (HIGH)                        // логический уровень, в который будет установлен пин ALARM_PIN, когда "рассвет"/будильник включен

//----------- В случае использования дополнительного AUX-реле для прямого или программируемого управления внешними приборами. -----------
// Для возможности использовать дополнительное AUX-реле, строки ниже должны быть раскомментированы
//#define AUX_PIN (D2)                                        // пин дополнительного реле общего назначения AUX. Может быть установлен любой из "безопасных"
                                                              // пин выбирать ВНИМАТЕЛЬНО, чтобы он не конфликтовал с пинами выше
//#define AUX_LEVEL (HIGH)                                    // логический уровень AUX_PIN, для активации реле - HIGH или LOW (зависит от типа используемого реле)

//------------------------------


//------------------------------ Настройки LED Матрицы или Ленты

#define LAMP_PIN              (D3)                          // пин матрицы (D3)

#define WIDTH                 (16U)                         // ширина матрицы
#define HEIGHT                (16U)                         // высота матрицы

#define COLOR_ORDER           (GRB)                         // порядок цветов на ленте. Если цвет отображается некорректно - меняйте. Начать можно с RGB

#define MATRIX_TYPE           (0U)                          // тип матрицы: 0 - зигзаг, 1 - параллельная
#define CONNECTION_ANGLE      (1U)                          // угол подключения: 0 - левый нижний, 1 - левый верхний, 2 - правый верхний, 3 - правый нижний
#define STRIP_DIRECTION       (3U)                          // направление ленты из угла: 0 - вправо, 1 - вверх, 2 - влево, 3 - вниз
                                                            // при неправильной настройке матрицы вы получите предупреждение "Wrong matrix parameters! Set to default"
                                                            // шпаргалка по настройке матрицы здесь! https://alexgyver.ru/matrix_guide/
#define SEGMENTS              (1U)                          // диодов в одном "пикселе" (для создания матрицы из кусков ленты)

#define BRIGHTNESS            (255U)                        // стандартная максимальная яркость (0-255), чем меньше значение, тем меньше максимально возможная яркость
#define OFF_BRIGHTNESS          (2U)                        // яркость вывода текста в случае выключенной лампы
#define CURRENT_LIMIT         (2000U)                       // лимит по току в миллиамперах, автоматически управляет яркостью (пожалей свой блок питания!) 0 - выключить лимит

//#define XY_EXTERN                                           // Пользовательский мапинг нестандартных матриц, читать в файле ../include/XY.h и\или тут 
                                                            // https://community.alexgyver.ru/threads/wifi-lampa-budilnik-proshivka-firelamp_jeeui-gpl.2739/post-64771
                                                            // тут отчет пользователя 
                                                            // https://community.alexgyver.ru/threads/wifi-lampa-budilnik-proshivka-firelamp_jeeui-gpl.2739/post-72777
//------------------------------ 


// ----------------------------- Настройки времени/зоны часового пояса.
// Эти паметры выставлять необязательно, по-умолчанию будет использоваться сервис автоматического
// определения временной зоны через http сервис, при этом корректность выставления часового пояса будет зависеть
// работоспособности стороннего сервиса.
// Если параметры выставленны, правила перехода на летнее/зимнее время будут внедренны в прошивку и внешний сервис
// опрашиваться не будет. Точное время в любом случае будет обновляться из пула ntp-серверов.

//#define TZONE                 TZ_Etc_GMT                    // временная зона для определения параметров часового пояса и автоматического
                                                              // перехода на летнее/зимнее время (пример "TZ_Europe_Moscow", "TZ_Europe_Kiev", "TZ_Asia_Tokyo")
                                                              // список временных зон можно найти тут https://github.com/esp8266/Arduino/blob/master/cores/esp8266/TZ.h
                                                              // если не заданно используется автоопределение временной зоны на основе айпи-адреса через сторонний сервис
//#define COUNTRY               ("")                          // двухбуквенный код страны (ru/ua/jp и т.п.) для выбора набора ближайших ntp серверов
                                                              // по умолчанию случайный сервер из pool.ntp.org
                                                              // ntp сервер также может быть переопределен автоматически через настройки DHCP-cервера в вашей WiFi сети (если есть)
//------------------------------ 

//------------------------------ Всякое разное
#define VERTGAUGE             (1U)                          // вертикальный/горизонтальный(1/0) индикатор, закомментировано - отключен (дефолтное поведение в config.h - отключен)
// #define NUMHOLD_TIME          (3000U)                       // время запоминания последней комбинации яркости/скорости/масштаба в мс

// #define FADE_TIME             (1000U)                       // длительность всего фейдера в мс (плавное затухание эффекта при смене в DEMO)
// #define FADE_STEPTIME         (20U)                         // длительность шага фейдера, мс

// #define MAX_FPS               (60U)                         // Максимальное число обсчитываемых и выводимых кадров в секунду
                                                               // реальное число FPS зависит от сложности эффекта, размера матрицы и производительности контроллера
                                                               // esp8266 на 80MHz может обсчитать одну матрицу 16x16 со скоростью около 50 кадров в секунду в зависимости от эффекта
                                                               // и с учетом остальных сопутствующих задач
//#define SPEED_ADJ (float)NUM_LEDS/256                         // Без надобности не трогать! Поправка скорости риал-тайм эффектов относительно размеров метрицы.

// #define TEXT_OFFSET           (4U)                          // высота, на которой бежит текст (от низа матрицы)
// #define LET_WIDTH             (5U)                          // ширина буквы шрифта
// #define LET_HEIGHT            (8U)                          // высота буквы шрифта
// #define LET_SPACE             (1U)                          // пропуск между символами (кол-во пикселей)
// #define LETTER_COLOR          (CRGB::White)                 // цвет букв по умолчанию
// #define DEFAULT_TEXT_SPEED    (100U)                        // скорость движения текста, в миллисекундах - меньше == быстрее
#define FADETOBLACKVALUE      (222U)                        // степень затенения фона под текстом, до 255, чем больше число - тем больше затенение.
//------------------------------ 


//------------------------------  РАССВЕТ (устарело)
// #define DAWN_BRIGHT           (200U)                        // максимальная яркость рассвета (0-255)
// #define DAWN_TIMEOUT          (1U)                          // сколько рассвет светит после времени будильника, минут
#define PRINT_ALARM_TIME                                    // нужен ли вывод времени для будильника, если пустая строка в событии будильника (дефолтное поведение в config.h - вывод времени отключен)
//------------------------------ 

#endif
